{"version":3,"sources":["components/Loader/Loader.js","routes/PrivateRoute.js","routes/PublicRoute.js","App.js","serviceWorker.js","index.js","config/auth_config.js","config/api.js","config/http.js","config/auth0.js"],"names":["Loader","className","PrivateRoute","Component","component","rest","props","isLoggedIn","to","PublicRoute","window","history","back","e","location","href","origin","Login","lazy","Logout","Authorize","NotFound","App","fallback","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","config","clientID","domain","ApiRoot","url","data","headers","Accept","localStorage","getItem","Authorization","fetch","method","body","JSON","stringify","res","json","err","configs","webAuth","auth0","responseType","redirectUri","scope","login","authorize","handleAuthentication","hash","parseHash","authResult","a","log","setSession","accessToken","http","auth_token","setItem","token","handleLogout","logout","returnTo"],"mappings":"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","file":"static/js/main.b501f922.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\nconst Loader = () => {\n    return (\n        <div className='loader' />\n    )\n}\n\nexport default Loader;","import React from 'react';\nimport { isLoggedIn } from '../config/auth0';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({\n    component: Component,\n    ...rest\n}) => {\n    return (\n        <Route {...rest} component={(props) => (\n            isLoggedIn() ? (\n                <Component {...props} />\n            ) : (\n                <Redirect to='/auth/login' />\n            )\n        )} />\n    );\n}\n\n\nexport default PrivateRoute;","import React from 'react';\nimport { isLoggedIn } from '../config/auth0';\nimport { Route } from 'react-router-dom';\n\nconst PublicRoute = ({\n    component: Component,\n    ...rest\n}) => {\n    if (!isLoggedIn() ) return (\n        <Route {...rest} component={(props) => (\n            <Component {...props} />\n        )} />\n    );\n    try {\n        window.history.back();\n    } catch (e) {\n        window.location.href = `${window.location.origin}/`;\n    };\n    return null;\n}\n\n\nexport default PublicRoute;","import React, {lazy, Suspense} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport PrivateRoute from './routes/PrivateRoute';\nimport PublicRoute from './routes/PublicRoute';\nimport Loader from './components/Loader/Loader';\n\nconst Login = lazy(() => import('./pages/Login/Login'));\nconst Logout = lazy(() => import('./pages/Logout/Logout'));\nconst Authorize = lazy(() => import('./pages/Authorize/Authorize'));\nconst NotFound = lazy(() => import('./pages/NotFound'));\n// import Base from './pages/Base';\n\nconst App = () => {\n    return (\n        <div className='App'>\n            <Router>\n            <Suspense fallback={<div className='fullCenter'><Loader /></div>}>\n                <Switch>\n                    <PublicRoute path='/auth/login' component={Login} />\n                    <PrivateRoute path='/auth/logout' component={Logout} />\n                    <PrivateRoute path='/auth/authorize' component={Authorize} />\n                    <Route component={NotFound} />\n                </Switch>\n            </Suspense>\n        </Router>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const config = () => {\n  if (process.env.NODE_ENV === 'development') {\n      return {\n      clientID: 'Xcmx1whIj6t4qEUvzYkoXz1Icq3hHD3B',\n      domain: 'ajeshkumar.eu.auth0.com'\n      };\n  } else {\n      return {\n      clientID: 'Xcmx1whIj6t4qEUvzYkoXz1Icq3hHD3B',\n      domain: 'ajeshkumar.eu.auth0.com'\n      };\n  }\n};\n\nexport default config;  ","export const WSRoot = `ws://${window.location.hostname}`;\nexport const ApiRoot = window.location.origin + '/api';","import { ApiRoot } from './api';\n\nconst post = (url, data) => {\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n  if (localStorage.getItem('jwt_token')) {\n    headers.Authorization = 'Bearer ' + localStorage.getItem('jwt_token');\n  }\n  return fetch(ApiRoot + url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n  })\n    .then(res => res.json())\n    .catch(err => err);\n};\n\nconst get = (url) => {\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n  if (localStorage.getItem('jwt_token')) {\n    headers.Authorization = 'Bearer ' + localStorage.getItem('jwt_token');\n  }\n  return fetch(ApiRoot + url, {\n    method: 'GET',\n    headers: headers\n  })\n    .then(res => res.json())\n    .catch(err => console.log(err));\n};\n\nexport default { post, get };","import * as auth0 from 'auth0-js';\n\nimport configs from './auth_config';\nimport http from './http';\n\nconst config = configs();\n\nconst webAuth = new auth0.WebAuth({\n    clientID: config.clientID,\n    domain: config.domain,\n    responseType: 'token id_token',\n    redirectUri: `${window.location.origin}/auth/login/callback`,\n    scope: 'openid profile email'\n});\n\nexport const login = () => {\n    webAuth.authorize();\n};\n\nexport const handleAuthentication = (hash, history) => {\n    return webAuth.parseHash({ hash }, async function (\n        err,\n        authResult\n    ) {\n        if (err) {\n            console.log(err);\n        }\n\n        setSession(authResult, history);\n    });\n};\n\nconst setSession = (authResult, history) => {\n    console.log(authResult.accessToken);\n    return http\n        .post('/auth/login', { auth_token: authResult.accessToken })\n        .then(res => {\n            localStorage.setItem('jwt_token', res.token);\n            window.location.href = '/';\n        });\n};\n\nexport const handleLogout = (history) => {\n    webAuth.logout({\n        returnTo: window.location.origin\n    });\n};\n\nexport const isLoggedIn = () => {\n    if (localStorage.getItem('jwt_token')) {\n        return true;\n    }\n    return false;\n};"],"sourceRoot":""}